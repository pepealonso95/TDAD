{"instance_id": "astropy__astropy-12907", "model": "haiku", "prediction": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..45bea36085 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \ndiff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 8dfe5c8626..b99eafda13 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -148,3 +148,36 @@ def test_custom_model_separable():\n \n     assert not model_c().separable\n     assert np.all(separability_matrix(model_c()) == [True, True])\n+\n+\n+def test_nested_compound_models_separability():\n+    \"\"\"\n+    Test separability_matrix for nested CompoundModels.\n+\n+    Regression test for https://github.com/astropy/astropy/issues/12907\n+\n+    The separability matrix should be the same whether we use:\n+    - m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5) (non-nested)\n+    - m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)) (nested)\n+    \"\"\"\n+    # Create a nested compound model\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    nested = models.Pix2Sky_TAN() & cm\n+\n+    # Create the equivalent non-nested compound model\n+    non_nested = models.Pix2Sky_TAN() & models.Linear1D(10) & models.Linear1D(5)\n+\n+    # The separability matrices should be identical\n+    nested_sep = separability_matrix(nested)\n+    non_nested_sep = separability_matrix(non_nested)\n+\n+    assert_allclose(nested_sep, non_nested_sep)\n+\n+    # Verify the expected pattern\n+    expected = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(nested_sep, expected)\n"}
