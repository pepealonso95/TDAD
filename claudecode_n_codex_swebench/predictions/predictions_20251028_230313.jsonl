{"instance_id": "astropy__astropy-12907", "model": "claude-code", "prediction": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..45bea36085 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \ndiff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 8dfe5c8626..52c3fc665b 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -28,6 +28,13 @@ p22 = models.Polynomial2D(2, name='p22')\n p1 = models.Polynomial1D(1, name='p1')\n \n \n+cm_4d_expected = (np.array([False, False, True, True]),\n+                  np.array([[True,  True,  False, False],\n+                            [True,  True,  False, False],\n+                            [False, False, True,  False],\n+                            [False, False, False, True]]))\n+\n+\n compound_models = {\n     'cm1': (map3 & sh1 | rot & sh1 | sh1 & sh2 & sh1,\n             (np.array([False, False, True]),\n@@ -52,7 +59,17 @@ compound_models = {\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    'cm8': (rot & (sh1 & sh2), cm_4d_expected),\n+    'cm9': (rot & sh1 & sh2, cm_4d_expected),\n+    'cm10': ((rot & sh1) & sh2, cm_4d_expected),\n+    'cm11': (rot & sh1 & (scl1 & scl2),\n+             (np.array([False, False, True, True, True]),\n+              np.array([[True,  True,  False, False, False],\n+                        [True,  True,  False, False, False],\n+                        [False, False, True,  False, False],\n+                        [False, False, False, True,  False],\n+                        [False, False, False, False, True]])))\n }\n \n \ndiff --git a/docs/changes/modeling/12907.bugfix.rst b/docs/changes/modeling/12907.bugfix.rst\nnew file mode 100644\nindex 0000000000..a5d8c14706\n--- /dev/null\n+++ b/docs/changes/modeling/12907.bugfix.rst\n@@ -0,0 +1 @@\n+Fix computation of the separability of a ``CompoundModel`` where another ``CompoundModel`` is on the right hand side of the ``&`` operator.\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..23f091588c\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,58 @@\n+\"\"\"Test to reproduce the issue with nested CompoundModels.\"\"\"\n+import numpy as np\n+import sys\n+sys.path.insert(0, '/private/var/folders/1w/rzqmc5l14q1dgsfxmj3zrml40000gn/T/swe_bench_astropy__astropy-12907')\n+\n+# We'll manually test the logic without importing astropy\n+# since it needs to be built first\n+\n+# Simulating the bug in _cstack function\n+def _cstack_buggy(left_shape, right_matrix):\n+    \"\"\"Simulate the buggy behavior.\"\"\"\n+    noutp = left_shape[0] + right_matrix.shape[0]\n+\n+    # This is the buggy code from line 244-245\n+    cright = np.zeros((noutp, right_matrix.shape[1]))\n+    cright[-right_matrix.shape[0]:, -right_matrix.shape[1]:] = 1  # BUG: should be = right_matrix\n+\n+    return cright\n+\n+def _cstack_fixed(left_shape, right_matrix):\n+    \"\"\"Simulate the fixed behavior.\"\"\"\n+    noutp = left_shape[0] + right_matrix.shape[0]\n+\n+    # This is the fixed code\n+    cright = np.zeros((noutp, right_matrix.shape[1]))\n+    cright[-right_matrix.shape[0]:, -right_matrix.shape[1]:] = right_matrix  # FIX: copy the actual matrix\n+\n+    return cright\n+\n+# Test case: simulating cm = m.Linear1D(10) & m.Linear1D(5)\n+# The separability matrix for cm should be [[1, 0], [0, 1]] (diagonal)\n+cm_matrix = np.array([[1, 0], [0, 1]])\n+\n+# Now simulating m.Pix2Sky_TAN() & cm\n+# Pix2Sky_TAN has 2 inputs and 2 outputs, so its part would be [[1, 1], [1, 1]]\n+# When we stack this with cm, we should get:\n+# [[1, 1, 0, 0],  # Pix2Sky output 1 depends on its inputs\n+#  [1, 1, 0, 0],  # Pix2Sky output 2 depends on its inputs\n+#  [0, 0, 1, 0],  # Linear1D(10) output depends only on its input\n+#  [0, 0, 0, 1]]  # Linear1D(5) output depends only on its input\n+\n+left_shape = (2, 2)  # Pix2Sky_TAN part\n+\n+print(\"Buggy implementation:\")\n+result_buggy = _cstack_buggy(left_shape, cm_matrix)\n+print(result_buggy)\n+print(\"\\nExpected result:\")\n+expected = np.array([[0, 0],\n+                     [0, 0],\n+                     [1, 0],\n+                     [0, 1]])\n+print(expected)\n+\n+print(\"\\nFixed implementation:\")\n+result_fixed = _cstack_fixed(left_shape, cm_matrix)\n+print(result_fixed)\n+\n+print(\"\\nMatch with expected:\", np.array_equal(result_fixed, expected))\ndiff --git a/test_nested_compound_fix.py b/test_nested_compound_fix.py\nnew file mode 100644\nindex 0000000000..ce03fb8319\n--- /dev/null\n+++ b/test_nested_compound_fix.py\n@@ -0,0 +1,79 @@\n+\"\"\"\n+Test to verify the fix for nested CompoundModels separability.\n+\n+This test reproduces the issue described in the bug report and verifies\n+that the fix correctly computes the separability matrix for nested compound models.\n+\"\"\"\n+import numpy as np\n+import sys\n+\n+# Add the path to the astropy source\n+sys.path.insert(0, '/private/var/folders/1w/rzqmc5l14q1dgsfxmj3zrml40000gn/T/swe_bench_astropy__astropy-12907')\n+\n+# We need to test without building, so we'll directly test the _cstack function\n+from astropy.modeling.separable import _cstack, _coord_matrix\n+from astropy.modeling import models as m\n+\n+def test_nested_compound_models():\n+    \"\"\"Test that nested compound models maintain separability.\"\"\"\n+\n+    print(\"Testing nested compound models separability fix...\")\n+    print(\"=\" * 60)\n+\n+    # Create a simple compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    print(\"\\n1. Simple compound model: Linear1D(10) & Linear1D(5)\")\n+    print(f\"   n_inputs: {cm.n_inputs}, n_outputs: {cm.n_outputs}\")\n+\n+    # Get the coord matrix for cm\n+    cm_matrix = _coord_matrix(cm.left, 'left', cm.n_outputs)\n+    right_matrix = _coord_matrix(cm.right, 'right', cm.n_outputs)\n+    cm_full_matrix = np.hstack([cm_matrix, right_matrix])\n+    print(f\"   Separability structure:\\n{cm_full_matrix}\")\n+\n+    # Now test stacking with Pix2Sky_TAN\n+    pix2sky = m.Pix2Sky_TAN()\n+    print(f\"\\n2. Pix2Sky_TAN model\")\n+    print(f\"   n_inputs: {pix2sky.n_inputs}, n_outputs: {pix2sky.n_outputs}\")\n+    pix2sky_matrix = _coord_matrix(pix2sky, 'left', pix2sky.n_outputs)\n+    print(f\"   Separability structure:\\n{pix2sky_matrix}\")\n+\n+    # Test the _cstack function directly with a matrix as the right argument\n+    # This simulates what happens when we do Pix2Sky_TAN() & cm\n+    print(\"\\n3. Testing _cstack(pix2sky_matrix, cm_full_matrix)...\")\n+\n+    # This is what happens internally when processing nested compound models\n+    result = _cstack(pix2sky_matrix, cm_full_matrix)\n+\n+    print(f\"   Result shape: {result.shape}\")\n+    print(f\"   Result:\\n{result}\")\n+\n+    # Expected result: diagonal block structure\n+    # First 2 rows/cols for Pix2Sky_TAN (non-separable, depends on both inputs)\n+    # Last 2 rows/cols for the two Linear1D models (separable, diagonal)\n+    expected = np.array([\n+        [1., 1., 0., 0.],  # Pix2Sky output 1 depends on both Pix2Sky inputs\n+        [1., 1., 0., 0.],  # Pix2Sky output 2 depends on both Pix2Sky inputs\n+        [0., 0., 1., 0.],  # Linear1D(10) output depends only on its input\n+        [0., 0., 0., 1.]   # Linear1D(5) output depends only on its input\n+    ])\n+\n+    print(f\"\\n   Expected:\\n{expected}\")\n+\n+    if np.array_equal(result, expected):\n+        print(\"\\n✓ PASS: Nested compound model separability is correctly computed!\")\n+        return True\n+    else:\n+        print(\"\\n✗ FAIL: Separability matrix does not match expected result!\")\n+        print(f\"\\n   Difference:\\n{result - expected}\")\n+        return False\n+\n+if __name__ == \"__main__\":\n+    try:\n+        success = test_nested_compound_models()\n+        sys.exit(0 if success else 1)\n+    except Exception as e:\n+        print(f\"\\n✗ ERROR: {e}\")\n+        import traceback\n+        traceback.print_exc()\n+        sys.exit(1)\ndiff --git a/verify_fix.py b/verify_fix.py\nnew file mode 100644\nindex 0000000000..6b90a23bfc\n--- /dev/null\n+++ b/verify_fix.py\n@@ -0,0 +1,122 @@\n+\"\"\"\n+Verification script to demonstrate the fix for nested CompoundModels separability.\n+\n+This script directly tests the _cstack function logic that was fixed,\n+without needing to build the full astropy package.\n+\"\"\"\n+import numpy as np\n+\n+def _cstack_original(left, right):\n+    \"\"\"Original buggy implementation.\"\"\"\n+    # Simplified for demonstration - assume inputs are already matrices\n+    noutp = left.shape[0] + right.shape[0]\n+\n+    cleft = np.zeros((noutp, left.shape[1]))\n+    cleft[:left.shape[0], :left.shape[1]] = left\n+\n+    # BUG: Setting all values to 1 instead of copying the matrix\n+    cright = np.zeros((noutp, right.shape[1]))\n+    cright[-right.shape[0]:, -right.shape[1]:] = 1  # <-- BUG\n+\n+    return np.hstack([cleft, cright])\n+\n+def _cstack_fixed(left, right):\n+    \"\"\"Fixed implementation.\"\"\"\n+    # Simplified for demonstration - assume inputs are already matrices\n+    noutp = left.shape[0] + right.shape[0]\n+\n+    cleft = np.zeros((noutp, left.shape[1]))\n+    cleft[:left.shape[0], :left.shape[1]] = left\n+\n+    # FIX: Copy the actual matrix values\n+    cright = np.zeros((noutp, right.shape[1]))\n+    cright[-right.shape[0]:, -right.shape[1]:] = right  # <-- FIX\n+\n+    return np.hstack([cleft, cright])\n+\n+def test_nested_compound_model():\n+    \"\"\"\n+    Test case from the issue report:\n+\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    separability_matrix(m.Pix2Sky_TAN() & cm)\n+\n+    Expected: Diagonal structure for the linear models\n+    Bug: Last two rows show [True, True] instead of diagonal\n+    \"\"\"\n+\n+    print(\"=\"*70)\n+    print(\"Testing: Nested CompoundModel Separability Fix\")\n+    print(\"=\"*70)\n+\n+    # Simulate the separability matrix for Pix2Sky_TAN (2 inputs, 2 outputs)\n+    # It's not separable, so both outputs depend on both inputs\n+    pix2sky_matrix = np.array([[1., 1.],\n+                                [1., 1.]])\n+\n+    # Simulate the separability matrix for cm = Linear1D(10) & Linear1D(5)\n+    # This should be diagonal (each output depends only on its input)\n+    cm_matrix = np.array([[1., 0.],\n+                          [0., 1.]])\n+\n+    print(\"\\n1. Input matrices:\")\n+    print(\"   Pix2Sky_TAN matrix (2x2):\")\n+    print(\"   \", pix2sky_matrix)\n+    print(\"   CompoundModel cm matrix (2x2):\")\n+    print(\"   \", cm_matrix)\n+\n+    print(\"\\n2. Testing ORIGINAL (buggy) implementation:\")\n+    result_buggy = _cstack_original(pix2sky_matrix, cm_matrix)\n+    print(\"   Result shape:\", result_buggy.shape)\n+    print(\"   Result:\")\n+    for row in result_buggy:\n+        print(\"   \", row)\n+\n+    # Check if the bug manifests\n+    buggy_last_two_rows = result_buggy[2:, 2:]\n+    print(\"\\n   Last 2x2 block (should be diagonal):\")\n+    print(\"   \", buggy_last_two_rows[0])\n+    print(\"   \", buggy_last_two_rows[1])\n+    if np.array_equal(buggy_last_two_rows, np.array([[1., 1.], [1., 1.]])):\n+        print(\"   ❌ BUG CONFIRMED: Shows [1,1] and [1,1] instead of diagonal!\")\n+\n+    print(\"\\n3. Testing FIXED implementation:\")\n+    result_fixed = _cstack_fixed(pix2sky_matrix, cm_matrix)\n+    print(\"   Result shape:\", result_fixed.shape)\n+    print(\"   Result:\")\n+    for row in result_fixed:\n+        print(\"   \", row)\n+\n+    # Check if the fix works\n+    fixed_last_two_rows = result_fixed[2:, 2:]\n+    print(\"\\n   Last 2x2 block (should be diagonal):\")\n+    print(\"   \", fixed_last_two_rows[0])\n+    print(\"   \", fixed_last_two_rows[1])\n+\n+    expected = np.array([[1., 1., 0., 0.],\n+                         [1., 1., 0., 0.],\n+                         [0., 0., 1., 0.],\n+                         [0., 0., 0., 1.]])\n+\n+    if np.array_equal(result_fixed, expected):\n+        print(\"   ✅ FIX VERIFIED: Correct diagonal structure!\")\n+        print(\"\\n4. Summary:\")\n+        print(\"   The fix correctly preserves the separability structure of\")\n+        print(\"   nested compound models. Each Linear1D output now correctly\")\n+        print(\"   shows dependence only on its corresponding input.\")\n+        return True\n+    else:\n+        print(\"   ❌ UNEXPECTED: Result doesn't match expected\")\n+        print(\"   Expected:\")\n+        for row in expected:\n+            print(\"   \", row)\n+        return False\n+\n+if __name__ == \"__main__\":\n+    success = test_nested_compound_model()\n+    print(\"\\n\" + \"=\"*70)\n+    if success:\n+        print(\"✅ Verification PASSED\")\n+    else:\n+        print(\"❌ Verification FAILED\")\n+    print(\"=\"*70)\n"}
